# -*- coding: utf-8 -*-
import customtkinter as ctk
import json
import os
from datetime import datetime

class SimpleNotesWidget:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = ctk.CTk()
        self.root.title("–ü—Ä–æ—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
        self.root.geometry("400x800")  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –Ω–∞ 300 –ø–∏–∫—Å–µ–ª–µ–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.root.attributes('-topmost', True)
        self.root.attributes('-alpha', 0.95)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        self.drag_x = 0
        self.drag_y = 0
        self.is_dragging = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫
        self.notes_file = "notes.json"
        self.load_notes()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.bind_events()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ctk.CTkFrame(self.root, corner_radius=15)
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self.main_frame, 
            text="üìù –ú–æ–∏ –ó–∞–º–µ—Ç–∫–∏", 
            font=ctk.CTkFont(size=20, weight="bold")
        )
        self.title_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        self.control_frame.pack(fill="x", padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        self.minimize_btn = ctk.CTkButton(
            self.control_frame,
            text="–°–≤–µ—Ä–Ω—É—Ç—å",
            command=self.toggle_minimize,
            width=80
        )
        self.minimize_btn.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_btn = ctk.CTkButton(
            self.control_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=self.root.quit,
            width=80,
            fg_color="red",
            hover_color="darkred"
        )
        self.close_btn.pack(side="right", padx=5)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
        self.notes_container = ctk.CTkScrollableFrame(
            self.main_frame,
            corner_radius=10,
            height=200
        )
        self.notes_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
        self.input_label = ctk.CTkLabel(
            self.main_frame,
            text="‚úèÔ∏è –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞:",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.input_label.pack(anchor="w", padx=15, pady=(10, 5))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.note_entry = ctk.CTkTextbox(
            self.main_frame,
            height=100,
            corner_radius=8,
            font=ctk.CTkFont(size=12),
            wrap="word"
        )
        self.note_entry.pack(fill="x", padx=15, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = ctk.CTkButton(
            self.main_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
            command=self.save_note,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.save_btn.pack(padx=15, pady=(0, 15))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = ctk.CTkLabel(
            self.main_frame,
            text="üìä –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: 0",
            font=ctk.CTkFont(size=12)
        )
        self.stats_label.pack(pady=(0, 10))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.note_entry.focus_set()
        
    def bind_events(self):
        """–ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        self.title_label.bind("<Button-1>", self.start_drag)
        self.title_label.bind("<B1-Motion>", self.on_drag)
        self.title_label.bind("<ButtonRelease-1>", self.stop_drag)
        
    def start_drag(self, event):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        self.is_dragging = True
        self.drag_x = event.x
        self.drag_y = event.y
        
    def on_drag(self, event):
        """–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        if self.is_dragging:
            x = self.root.winfo_x() + (event.x - self.drag_x)
            y = self.root.winfo_y() + (event.y - self.drag_y)
            self.root.geometry(f"+{x}+{y}")
            
    def stop_drag(self, event):
        """–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        self.is_dragging = False
        
    def toggle_minimize(self):
        """–°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        if self.root.winfo_height() > 200:
            # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            self.root.geometry(f"{self.root.winfo_width()}x150")
            self.notes_container.pack_forget()
            self.input_label.pack_forget()
            self.note_entry.pack_forget()
            self.save_btn.pack_forget()
            self.stats_label.pack_forget()
            self.minimize_btn.configure(text="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å")
        else:
            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            self.root.geometry("400x800")  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –Ω–∞ 300 –ø–∏–∫—Å–µ–ª–µ–π
            self.notes_container.pack(fill="both", expand=True, padx=10, pady=10)
            self.input_label.pack(anchor="w", padx=15, pady=(10, 5))
            self.note_entry.pack(fill="x", padx=15, pady=(0, 10))
            self.save_btn.pack(padx=15, pady=(0, 15))
            self.stats_label.pack(pady=(0, 10))
            self.minimize_btn.configure(text="–°–≤–µ—Ä–Ω—É—Ç—å")
            
    def save_note(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        try:
            note_text = self.note_entry.get("1.0", "end-1c").strip()
            if note_text:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                max_id = max([note.get('id', 0) for note in self.notes]) if self.notes else 0
                new_note = {
                    "text": note_text,
                    "timestamp": timestamp,
                    "id": max_id + 1
                }
                
                self.notes.append(new_note)
                self.save_to_file()
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                self.note_entry.delete("1.0", "end")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.update_notes_display()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                self.show_notification("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å
                self.note_entry.focus_set()
        except Exception as e:
            self.show_notification(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
    def update_notes_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        for widget in self.notes_container.winfo_children():
            widget.destroy()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats_label.configure(text=f"üìä –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(self.notes)}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
        for note in reversed(self.notes):
            self.create_note_widget(note)
            
    def create_note_widget(self, note):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏"""
        # –§—Ä–µ–π–º –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
        note_frame = ctk.CTkFrame(
            self.notes_container,
            corner_radius=10
        )
        note_frame.pack(fill="x", padx=5, pady=3)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ctk.CTkFrame(note_frame, fg_color="transparent")
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        # –ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏
        note_id = note.get('id', '?')
        note_id_label = ctk.CTkLabel(
            header_frame,
            text=f"#{note_id}",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        note_id_label.pack(side="left")
        
        # –î–∞—Ç–∞
        date_label = ctk.CTkLabel(
            header_frame,
            text=note['timestamp'],
            font=ctk.CTkFont(size=10)
        )
        date_label.pack(side="right")
        
        # –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        text_label = ctk.CTkLabel(
            note_frame,
            text=note['text'],
            font=ctk.CTkFont(size=12),
            wraplength=350,
            justify="left"
        )
        text_label.pack(fill="x", padx=10, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = ctk.CTkButton(
            note_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            width=80,
            height=25,
            command=lambda: self.delete_note(note_id),
            fg_color="red",
            hover_color="darkred",
            font=ctk.CTkFont(size=10)
        )
        delete_btn.pack(anchor="e", padx=10, pady=(0, 10))
        
    def delete_note(self, note_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
        self.notes = [note for note in self.notes if note.get('id') != note_id]
        self.save_to_file()
        self.update_notes_display()
        self.show_notification("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        
    def show_notification(self, message):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notification = ctk.CTkLabel(
            self.root,
            text=message,
            font=ctk.CTkFont(size=12, weight="bold"),
            fg_color="green",
            text_color="white",
            corner_radius=8
        )
        notification.place(relx=0.5, rely=0.1, anchor="center")
        
        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        self.root.after(2000, notification.destroy)
        
    def load_notes(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.notes_file):
            try:
                with open(self.notes_file, 'r', encoding='utf-8') as f:
                    self.notes = json.load(f)
                # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–º–µ—Ç–æ–∫
                for i, note in enumerate(self.notes):
                    if 'id' not in note:
                        note['id'] = i + 1
            except:
                self.notes = []
        else:
            self.notes = []
            
    def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª"""
        with open(self.notes_file, 'w', encoding='utf-8') as f:
            json.dump(self.notes, f, ensure_ascii=False, indent=2)
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.update_notes_display()
        self.root.mainloop()

if __name__ == "__main__":
    widget = SimpleNotesWidget()
    widget.run() 